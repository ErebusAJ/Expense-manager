// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tables_groupMembers_debt.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addSimplifiedTransaction = `-- name: AddSimplifiedTransaction :one
INSERT INTO simplified_transactions(group_id, from_user, to_user, amount)
VALUES($1, $2, $3, $4)
ON CONFLICT (group_id, from_user, to_user)
DO UPDATE SET amount = EXCLUDED.amount
RETURNING id, group_id, from_user, to_user, amount
`

type AddSimplifiedTransactionParams struct {
	GroupID  uuid.UUID
	FromUser uuid.UUID
	ToUser   uuid.UUID
	Amount   string
}

func (q *Queries) AddSimplifiedTransaction(ctx context.Context, arg AddSimplifiedTransactionParams) (SimplifiedTransaction, error) {
	row := q.db.QueryRowContext(ctx, addSimplifiedTransaction,
		arg.GroupID,
		arg.FromUser,
		arg.ToUser,
		arg.Amount,
	)
	var i SimplifiedTransaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.FromUser,
		&i.ToUser,
		&i.Amount,
	)
	return i, err
}

const fetchNetBalance = `-- name: FetchNetBalance :many
WITH group_members_debt AS(
    SELECT
        e.created_by AS payer_id,
        ep.user_id AS member_id,
        e.amount AS total_amount,
        ep.amount AS share
    FROM
        group_expense e
    JOIN
        group_expense_participants ep ON e.id = ep.group_expense_id
    WHERE e.group_id=$1
)
SELECT
    u.id AS user_id,
    u.name,
    COALESCE(SUM(
        CASE
            WHEN ud.member_id = ud.payer_id THEN ud.total_amount - ud.share
            ELSE -ud.share
        END
    ), 0)::NUMERIC AS netBalance
FROM
    users u
INNER JOIN
    group_members_debt ud ON u.id = ud.member_id
GROUP BY u.id
`

type FetchNetBalanceRow struct {
	UserID     uuid.UUID
	Name       string
	Netbalance string
}

func (q *Queries) FetchNetBalance(ctx context.Context, groupID uuid.UUID) ([]FetchNetBalanceRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchNetBalance, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchNetBalanceRow
	for rows.Next() {
		var i FetchNetBalanceRow
		if err := rows.Scan(&i.UserID, &i.Name, &i.Netbalance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSimplifiedTransactions = `-- name: GetSimplifiedTransactions :many
SELECT
    st.from_user AS from_user_id,
    u_from.name AS from_user_name,
    st.to_user AS to_user_id,
    u_to.name AS to_user_name,
    st.amount
FROM simplified_transactions st
JOIN users u_from ON st.from_user = u_from.id
JOIN users u_to ON st.to_user = u_to.id
WHERE group_id=$1
`

type GetSimplifiedTransactionsRow struct {
	FromUserID   uuid.UUID
	FromUserName string
	ToUserID     uuid.UUID
	ToUserName   string
	Amount       string
}

func (q *Queries) GetSimplifiedTransactions(ctx context.Context, groupID uuid.UUID) ([]GetSimplifiedTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSimplifiedTransactions, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSimplifiedTransactionsRow
	for rows.Next() {
		var i GetSimplifiedTransactionsRow
		if err := rows.Scan(
			&i.FromUserID,
			&i.FromUserName,
			&i.ToUserID,
			&i.ToUserName,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDebts = `-- name: UpdateUserDebts :one
INSERT INTO group_members_debt(from_user, to_user, group_id, expense_id, amount)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (from_user, to_user, group_id) 
DO UPDATE SET amount = group_members_debt.amount + $5
RETURNING id, from_user, to_user, group_id, expense_id, amount, created_at, updated_at
`

type UpdateUserDebtsParams struct {
	FromUser  uuid.UUID
	ToUser    uuid.UUID
	GroupID   uuid.UUID
	ExpenseID uuid.UUID
	Amount    string
}

func (q *Queries) UpdateUserDebts(ctx context.Context, arg UpdateUserDebtsParams) (GroupMembersDebt, error) {
	row := q.db.QueryRowContext(ctx, updateUserDebts,
		arg.FromUser,
		arg.ToUser,
		arg.GroupID,
		arg.ExpenseID,
		arg.Amount,
	)
	var i GroupMembersDebt
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.GroupID,
		&i.ExpenseID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
