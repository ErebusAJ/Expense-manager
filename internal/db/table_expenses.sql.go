// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: table_expenses.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addExpense = `-- name: AddExpense :exec
INSERT INTO expenses(user_id, amount, title, description)
VALUES($1, $2, $3, $4)
`

type AddExpenseParams struct {
	UserID      uuid.UUID
	Amount      string
	Title       string
	Description sql.NullString
}

func (q *Queries) AddExpense(ctx context.Context, arg AddExpenseParams) error {
	_, err := q.db.ExecContext(ctx, addExpense,
		arg.UserID,
		arg.Amount,
		arg.Title,
		arg.Description,
	)
	return err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE id=$1
`

func (q *Queries) DeleteExpense(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getAllExpenses = `-- name: GetAllExpenses :many
SELECT id, amount, title, description, created_at, updated_at FROM expenses
WHERE user_id=$1
ORDER BY created_at DESC
`

type GetAllExpensesRow struct {
	ID          uuid.UUID
	Amount      string
	Title       string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetAllExpenses(ctx context.Context, userID uuid.UUID) ([]GetAllExpensesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExpensesRow
	for rows.Next() {
		var i GetAllExpensesRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseByID = `-- name: GetExpenseByID :one
SELECT id, amount, title, description, created_at, updated_at FROM expenses
WHERE id=$1
`

type GetExpenseByIDRow struct {
	ID          uuid.UUID
	Amount      string
	Title       string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetExpenseByID(ctx context.Context, id uuid.UUID) (GetExpenseByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getExpenseByID, id)
	var i GetExpenseByIDRow
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const totalExpense = `-- name: TotalExpense :one
SELECT sum(amount)::FLOAT AS total_expense FROM expenses
WHERE user_id=$1
`

func (q *Queries) TotalExpense(ctx context.Context, userID uuid.UUID) (float64, error) {
	row := q.db.QueryRowContext(ctx, totalExpense, userID)
	var total_expense float64
	err := row.Scan(&total_expense)
	return total_expense, err
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses
SET amount=$1, title=$2, description=$3, updated_at=CURRENT_TIMESTAMP
WHERE id=$4
RETURNING id, user_id, amount, title, description, created_at, updated_at
`

type UpdateExpenseParams struct {
	Amount      string
	Title       string
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpense,
		arg.Amount,
		arg.Title,
		arg.Description,
		arg.ID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
