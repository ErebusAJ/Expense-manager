// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tables_groupExpense.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addGroupExpense = `-- name: AddGroupExpense :one
INSERT INTO group_expense(title, description, amount, group_id, created_by)
VALUES($1, $2, $3, $4, $5)
RETURNING id, title, description, amount, group_id, created_by, created_at, updated_at
`

type AddGroupExpenseParams struct {
	Title       string
	Description sql.NullString
	Amount      string
	GroupID     uuid.UUID
	CreatedBy   uuid.UUID
}

func (q *Queries) AddGroupExpense(ctx context.Context, arg AddGroupExpenseParams) (GroupExpense, error) {
	row := q.db.QueryRowContext(ctx, addGroupExpense,
		arg.Title,
		arg.Description,
		arg.Amount,
		arg.GroupID,
		arg.CreatedBy,
	)
	var i GroupExpense
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.GroupID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addGroupExpenseMembers = `-- name: AddGroupExpenseMembers :one
INSERT INTO group_expense_participants(group_expense_id, user_id, amount)
VALUES($1, $2, $3)
RETURNING id, group_expense_id, user_id, amount, created_at, updated_at
`

type AddGroupExpenseMembersParams struct {
	GroupExpenseID uuid.UUID
	UserID         uuid.UUID
	Amount         string
}

func (q *Queries) AddGroupExpenseMembers(ctx context.Context, arg AddGroupExpenseMembersParams) (GroupExpenseParticipant, error) {
	row := q.db.QueryRowContext(ctx, addGroupExpenseMembers, arg.GroupExpenseID, arg.UserID, arg.Amount)
	var i GroupExpenseParticipant
	err := row.Scan(
		&i.ID,
		&i.GroupExpenseID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroupExpense = `-- name: DeleteGroupExpense :exec
DELETE FROM group_expense
WHERE id=$1
`

func (q *Queries) DeleteGroupExpense(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroupExpense, id)
	return err
}

const getAllGroupExpenses = `-- name: GetAllGroupExpenses :many
SELECT id, title, description, amount, group_id, created_by, created_at, updated_at FROM group_expense
WHERE group_id=$1
ORDER BY created_at DESC
`

func (q *Queries) GetAllGroupExpenses(ctx context.Context, groupID uuid.UUID) ([]GroupExpense, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupExpenses, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupExpense
	for rows.Next() {
		var i GroupExpense
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Amount,
			&i.GroupID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupExpenseByID = `-- name: GetGroupExpenseByID :one
SELECT id, title, description, amount, group_id, created_by, created_at, updated_at FROM group_expense
WHERE id=$1
`

func (q *Queries) GetGroupExpenseByID(ctx context.Context, id uuid.UUID) (GroupExpense, error) {
	row := q.db.QueryRowContext(ctx, getGroupExpenseByID, id)
	var i GroupExpense
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.GroupID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupExpenseMembersByID = `-- name: GetGroupExpenseMembersByID :many
SELECT id, group_expense_id, user_id, amount, created_at, updated_at FROM group_expense_participants
WHERE group_expense_id=$1
`

func (q *Queries) GetGroupExpenseMembersByID(ctx context.Context, groupExpenseID uuid.UUID) ([]GroupExpenseParticipant, error) {
	rows, err := q.db.QueryContext(ctx, getGroupExpenseMembersByID, groupExpenseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupExpenseParticipant
	for rows.Next() {
		var i GroupExpenseParticipant
		if err := rows.Scan(
			&i.ID,
			&i.GroupExpenseID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersTotalExpense = `-- name: GetMembersTotalExpense :many
SELECT u.name, u.id, SUM(group_expense_participants.amount)::FLOAT AS total_expense FROM group_expense_participants
INNER JOIN users u ON u.id = group_expense_participants.user_id
INNER JOIN group_expense ON group_expense.id = group_expense_participants.group_expense_id
WHERE group_id=$1
GROUP BY u.name, u.id
ORDER BY total_expense DESC
`

type GetMembersTotalExpenseRow struct {
	Name         string
	ID           uuid.UUID
	TotalExpense float64
}

func (q *Queries) GetMembersTotalExpense(ctx context.Context, groupID uuid.UUID) ([]GetMembersTotalExpenseRow, error) {
	rows, err := q.db.QueryContext(ctx, getMembersTotalExpense, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersTotalExpenseRow
	for rows.Next() {
		var i GetMembersTotalExpenseRow
		if err := rows.Scan(&i.Name, &i.ID, &i.TotalExpense); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalGroupExpense = `-- name: GetTotalGroupExpense :one
SELECT SUM(amount)::FLOAT AS total_expense FROM group_expense
WHERE group_id=$1
`

func (q *Queries) GetTotalGroupExpense(ctx context.Context, groupID uuid.UUID) (float64, error) {
	row := q.db.QueryRowContext(ctx, getTotalGroupExpense, groupID)
	var total_expense float64
	err := row.Scan(&total_expense)
	return total_expense, err
}

const updateGroupExpense = `-- name: UpdateGroupExpense :exec
UPDATE group_expense
SET title=$1, description=$2, amount=$3, updated_at=CURRENT_TIMESTAMP
WHERE id=$4
`

type UpdateGroupExpenseParams struct {
	Title       string
	Description sql.NullString
	Amount      string
	ID          uuid.UUID
}

func (q *Queries) UpdateGroupExpense(ctx context.Context, arg UpdateGroupExpenseParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupExpense,
		arg.Title,
		arg.Description,
		arg.Amount,
		arg.ID,
	)
	return err
}

const updateGroupExpenseMembers = `-- name: UpdateGroupExpenseMembers :exec
UPDATE group_expense_participants
SET amount=$1, updated_at=CURRENT_TIMESTAMP
WHERE id=$2
`

type UpdateGroupExpenseMembersParams struct {
	Amount string
	ID     uuid.UUID
}

func (q *Queries) UpdateGroupExpenseMembers(ctx context.Context, arg UpdateGroupExpenseMembersParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupExpenseMembers, arg.Amount, arg.ID)
	return err
}
