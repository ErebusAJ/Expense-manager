// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: table_users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users(id, name, email, password_hash, image_url)
VALUES($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash string
	ImageUrl     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.ImageUrl,
	)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id=$1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, password_hash, created_at, token_version, last_logged_in, access_level, image_url FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.TokenVersion,
			&i.LastLoggedIn,
			&i.AccessLevel,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password_hash, access_level FROM users
WHERE email=$1
`

type GetUserByEmailRow struct {
	ID           uuid.UUID
	PasswordHash string
	AccessLevel  string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash, &i.AccessLevel)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, created_at, token_version, last_logged_in, access_level, image_url FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.TokenVersion,
		&i.LastLoggedIn,
		&i.AccessLevel,
		&i.ImageUrl,
	)
	return i, err
}

const updateUserDetails = `-- name: UpdateUserDetails :exec
UPDATE users 
SET name=$1, password_hash=$2, email=$3
WHERE id=$4
`

type UpdateUserDetailsParams struct {
	Name         string
	PasswordHash string
	Email        string
	ID           uuid.UUID
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserDetails,
		arg.Name,
		arg.PasswordHash,
		arg.Email,
		arg.ID,
	)
	return err
}
